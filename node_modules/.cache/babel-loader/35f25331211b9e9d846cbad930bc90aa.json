{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\n\nvar internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\n\n\nvar assertIsHexString = function (input) {\n  if (!(0, internal_1.isHexString)(input)) {\n    var msg = \"This method only supports 0x-prefixed hex strings but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\n\nvar assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    var msg = \"This method only supports Buffer but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\n\nvar assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    var msg = \"This method only supports number arrays but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\n\nvar assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    var msg = \"This method only supports strings but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsString = assertIsString;","map":{"version":3,"sources":["D:\\react\\test\\node_modules\\ethereumjs-util\\src\\helpers.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;;AAGG;;;AACI,IAAM,iBAAiB,GAAG,UAAU,KAAV,EAAuB;AACtD,MAAI,CAAC,CAAA,GAAA,UAAA,CAAA,WAAA,EAAY,KAAZ,CAAL,EAAyB;AACvB,QAAM,GAAG,GAAG,sEAAoE,KAAhF;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALM;;AAAM,OAAA,CAAA,iBAAA,GAAiB,iBAAjB;AAOb;;;AAGG;;AACI,IAAM,cAAc,GAAG,UAAU,KAAV,EAAuB;AACnD,MAAI,CAAC,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAL,EAA6B;AAC3B,QAAM,GAAG,GAAG,qDAAmD,KAA/D;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;AAOb;;;AAGG;;AACI,IAAM,aAAa,GAAG,UAAU,KAAV,EAAyB;AACpD,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;AACzB,QAAM,GAAG,GAAG,4DAA0D,KAAtE;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALM;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb;AAOb;;;AAGG;;AACI,IAAM,cAAc,GAAG,UAAU,KAAV,EAAuB;AACnD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAM,GAAG,GAAG,sDAAoD,KAAhE;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd","sourcesContent":["import { isHexString } from './internal'\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexport const assertIsHexString = function (input: string): void {\n  if (!isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBuffer = function (input: Buffer): void {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexport const assertIsArray = function (input: number[]): void {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexport const assertIsString = function (input: string): void {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}