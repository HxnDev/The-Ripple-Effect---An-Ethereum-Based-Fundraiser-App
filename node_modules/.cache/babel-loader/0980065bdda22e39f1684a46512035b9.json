{"ast":null,"code":"'use strict';\n\nfunction withIs(Class, _ref) {\n  let {\n    className,\n    symbolName\n  } = _ref;\n  const symbol = Symbol.for(symbolName);\n  const ClassIsWrapper = {\n    // The code below assigns the class wrapper to an object to trick\n    // JavaScript engines to show the name of the extended class when\n    // logging an instances.\n    // We are assigning an anonymous class (class wrapper) to the object\n    // with key `className` to keep the correct name.\n    // If this is not supported it falls back to logging `ClassIsWrapper`.\n    [className]: class extends Class {\n      constructor() {\n        super(...arguments);\n        Object.defineProperty(this, symbol, {\n          value: true\n        });\n      }\n\n      get [Symbol.toStringTag]() {\n        return className;\n      }\n\n    }\n  }[className];\n\n  ClassIsWrapper[`is${className}`] = obj => !!(obj && obj[symbol]);\n\n  return ClassIsWrapper;\n}\n\nfunction withIsProto(Class, _ref2) {\n  let {\n    className,\n    symbolName,\n    withoutNew\n  } = _ref2;\n  const symbol = Symbol.for(symbolName);\n  /* eslint-disable object-shorthand */\n\n  const ClassIsWrapper = {\n    [className]: function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (withoutNew && !(this instanceof ClassIsWrapper)) {\n        return new ClassIsWrapper(...args);\n      }\n\n      const _this = Class.call(this, ...args) || this;\n\n      if (_this && !_this[symbol]) {\n        Object.defineProperty(_this, symbol, {\n          value: true\n        });\n      }\n\n      return _this;\n    }\n  }[className];\n  /* eslint-enable object-shorthand */\n\n  ClassIsWrapper.prototype = Object.create(Class.prototype);\n  ClassIsWrapper.prototype.constructor = ClassIsWrapper;\n  Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {\n    get() {\n      return className;\n    }\n\n  });\n\n  ClassIsWrapper[`is${className}`] = obj => !!(obj && obj[symbol]);\n\n  return ClassIsWrapper;\n}\n\nmodule.exports = withIs;\nmodule.exports.proto = withIsProto;","map":{"version":3,"sources":["D:/react/test/node_modules/class-is/index.js"],"names":["withIs","Class","className","symbolName","symbol","Symbol","for","ClassIsWrapper","constructor","Object","defineProperty","value","toStringTag","obj","withIsProto","withoutNew","args","_this","call","prototype","create","get","module","exports","proto"],"mappings":"AAAA;;AAEA,SAASA,MAAT,CAAgBC,KAAhB,QAAkD;AAAA,MAA3B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA2B;AAC9C,QAAMC,MAAM,GAAGC,MAAM,CAACC,GAAP,CAAWH,UAAX,CAAf;AAEA,QAAMI,cAAc,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,KAACL,SAAD,GAAa,cAAcD,KAAd,CAAoB;AAC7BO,MAAAA,WAAW,GAAU;AACjB,cAAM,YAAN;AACAC,QAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BN,MAA5B,EAAoC;AAAEO,UAAAA,KAAK,EAAE;AAAT,SAApC;AACH;;AAEsB,WAAlBN,MAAM,CAACO,WAAW,IAAI;AACvB,eAAOV,SAAP;AACH;;AAR4B;AAPd,IAiBrBA,SAjBqB,CAAvB;;AAmBAK,EAAAA,cAAc,CAAE,KAAIL,SAAU,EAAhB,CAAd,GAAoCW,GAAD,IAAS,CAAC,EAAEA,GAAG,IAAIA,GAAG,CAACT,MAAD,CAAZ,CAA7C;;AAEA,SAAOG,cAAP;AACH;;AAED,SAASO,WAAT,CAAqBb,KAArB,SAAmE;AAAA,MAAvC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,UAAb;AAAyBY,IAAAA;AAAzB,GAAuC;AAC/D,QAAMX,MAAM,GAAGC,MAAM,CAACC,GAAP,CAAWH,UAAX,CAAf;AAEA;;AACA,QAAMI,cAAc,GAAG;AACnB,KAACL,SAAD,GAAa,YAAmB;AAAA,wCAANc,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAC5B,UAAID,UAAU,IAAI,EAAE,gBAAgBR,cAAlB,CAAlB,EAAqD;AACjD,eAAO,IAAIA,cAAJ,CAAmB,GAAGS,IAAtB,CAAP;AACH;;AAED,YAAMC,KAAK,GAAGhB,KAAK,CAACiB,IAAN,CAAW,IAAX,EAAiB,GAAGF,IAApB,KAA6B,IAA3C;;AAEA,UAAIC,KAAK,IAAI,CAACA,KAAK,CAACb,MAAD,CAAnB,EAA6B;AACzBK,QAAAA,MAAM,CAACC,cAAP,CAAsBO,KAAtB,EAA6Bb,MAA7B,EAAqC;AAAEO,UAAAA,KAAK,EAAE;AAAT,SAArC;AACH;;AAED,aAAOM,KAAP;AACH;AAbkB,IAcrBf,SAdqB,CAAvB;AAeA;;AAEAK,EAAAA,cAAc,CAACY,SAAf,GAA2BV,MAAM,CAACW,MAAP,CAAcnB,KAAK,CAACkB,SAApB,CAA3B;AACAZ,EAAAA,cAAc,CAACY,SAAf,CAAyBX,WAAzB,GAAuCD,cAAvC;AAEAE,EAAAA,MAAM,CAACC,cAAP,CAAsBH,cAAc,CAACY,SAArC,EAAgDd,MAAM,CAACO,WAAvD,EAAoE;AAChES,IAAAA,GAAG,GAAG;AACF,aAAOnB,SAAP;AACH;;AAH+D,GAApE;;AAMAK,EAAAA,cAAc,CAAE,KAAIL,SAAU,EAAhB,CAAd,GAAoCW,GAAD,IAAS,CAAC,EAAEA,GAAG,IAAIA,GAAG,CAACT,MAAD,CAAZ,CAA7C;;AAEA,SAAOG,cAAP;AACH;;AAEDe,MAAM,CAACC,OAAP,GAAiBvB,MAAjB;AACAsB,MAAM,CAACC,OAAP,CAAeC,KAAf,GAAuBV,WAAvB","sourcesContent":["'use strict';\n\nfunction withIs(Class, { className, symbolName }) {\n    const symbol = Symbol.for(symbolName);\n\n    const ClassIsWrapper = {\n        // The code below assigns the class wrapper to an object to trick\n        // JavaScript engines to show the name of the extended class when\n        // logging an instances.\n        // We are assigning an anonymous class (class wrapper) to the object\n        // with key `className` to keep the correct name.\n        // If this is not supported it falls back to logging `ClassIsWrapper`.\n        [className]: class extends Class {\n            constructor(...args) {\n                super(...args);\n                Object.defineProperty(this, symbol, { value: true });\n            }\n\n            get [Symbol.toStringTag]() {\n                return className;\n            }\n        },\n    }[className];\n\n    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);\n\n    return ClassIsWrapper;\n}\n\nfunction withIsProto(Class, { className, symbolName, withoutNew }) {\n    const symbol = Symbol.for(symbolName);\n\n    /* eslint-disable object-shorthand */\n    const ClassIsWrapper = {\n        [className]: function (...args) {\n            if (withoutNew && !(this instanceof ClassIsWrapper)) {\n                return new ClassIsWrapper(...args);\n            }\n\n            const _this = Class.call(this, ...args) || this;\n\n            if (_this && !_this[symbol]) {\n                Object.defineProperty(_this, symbol, { value: true });\n            }\n\n            return _this;\n        },\n    }[className];\n    /* eslint-enable object-shorthand */\n\n    ClassIsWrapper.prototype = Object.create(Class.prototype);\n    ClassIsWrapper.prototype.constructor = ClassIsWrapper;\n\n    Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {\n        get() {\n            return className;\n        },\n    });\n\n    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);\n\n    return ClassIsWrapper;\n}\n\nmodule.exports = withIs;\nmodule.exports.proto = withIsProto;\n"]},"metadata":{},"sourceType":"script"}