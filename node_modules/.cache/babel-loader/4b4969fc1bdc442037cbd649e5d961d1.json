{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar internal_1 = require(\"./internal\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\n\n\nvar intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(\"Received an invalid integer type: \" + i);\n  }\n\n  return \"0x\" + i.toString(16);\n};\n\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\n\nvar intToBuffer = function (i) {\n  var hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\n\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\n\nvar zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\n\nvar setLength = function (msg, length, right) {\n  var buf = (0, exports.zeros)(length);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\n\nvar setLengthLeft = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\n\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\nvar setLengthRight = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\n\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\n\nvar stripZeros = function (a) {\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\n\n\nvar unpadBuffer = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\n\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\n\nvar unpadArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\n\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\n\nvar unpadHexString = function (a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return stripZeros(a);\n};\n\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\n\nvar toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n    }\n\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n\n  if (bn_js_1.default.isBN(v)) {\n    return v.toArrayLike(Buffer);\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n\n  throw new Error('invalid type');\n};\n\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\n\nvar bufferToInt = function (buf) {\n  return new bn_js_1.default((0, exports.toBuffer)(buf)).toNumber();\n};\n\nexports.bufferToInt = bufferToInt;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\n\nvar bufferToHex = function (buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\n\nexports.bufferToHex = bufferToHex;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\n\nvar fromSigned = function (num) {\n  return new bn_js_1.default(num).fromTwos(256);\n};\n\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\n\nvar toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\n\nvar addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\n\nexports.addHexPrefix = addHexPrefix;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\n\nvar toUtf8 = function (hex) {\n  var zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n\n  var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\n\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\n\nvar baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\" + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n\n    for (var i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n\n    return array;\n  }\n};\n\nexports.baToJSON = baToJSON;","map":{"version":3,"sources":["D:\\react\\test\\node_modules\\ethereumjs-util\\src\\bytes.ts"],"names":[],"mappings":"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","sourcesContent":["import BN from 'bn.js'\nimport { stripHexPrefix, padToEven, isHexString, isHexPrefixed } from './internal'\nimport { PrefixedHexString, TransformableToArray, TransformableToBuffer } from './types'\nimport { assertIsBuffer, assertIsArray, assertIsHexString } from './helpers'\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nexport const intToHex = function (i: number) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`)\n  }\n  return `0x${i.toString(16)}`\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nexport const intToBuffer = function (i: number) {\n  const hex = intToHex(i)\n  return Buffer.from(padToEven(hex.slice(2)), 'hex')\n}\n\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexport const zeros = function (bytes: number): Buffer {\n  return Buffer.allocUnsafe(bytes).fill(0)\n}\n\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg: Buffer, length: number, right: boolean) {\n  const buf = zeros(length)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthLeft = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, false)\n}\n\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthRight = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a: any): Buffer | number[] | string {\n  let first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexport const unpadBuffer = function (a: Buffer): Buffer {\n  assertIsBuffer(a)\n  return stripZeros(a) as Buffer\n}\n\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexport const unpadArray = function (a: number[]): number[] {\n  assertIsArray(a)\n  return stripZeros(a) as number[]\n}\n\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexport const unpadHexString = function (a: string): string {\n  assertIsHexString(a)\n  a = stripHexPrefix(a)\n  return stripZeros(a) as string\n}\n\nexport type ToBufferInputTypes =\n  | PrefixedHexString\n  | number\n  | BN\n  | Buffer\n  | Uint8Array\n  | number[]\n  | TransformableToArray\n  | TransformableToBuffer\n  | null\n  | undefined\n\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexport const toBuffer = function (v: ToBufferInputTypes): Buffer {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0)\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v)\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v as Uint8Array)\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`\n      )\n    }\n    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex')\n  }\n\n  if (typeof v === 'number') {\n    return intToBuffer(v)\n  }\n\n  if (BN.isBN(v)) {\n    return v.toArrayLike(Buffer)\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray())\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer())\n  }\n\n  throw new Error('invalid type')\n}\n\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport const bufferToInt = function (buf: Buffer): number {\n  return new BN(toBuffer(buf)).toNumber()\n}\n\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport const bufferToHex = function (buf: Buffer): string {\n  buf = toBuffer(buf)\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexport const fromSigned = function (num: Buffer): BN {\n  return new BN(num).fromTwos(256)\n}\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexport const toUnsigned = function (num: BN): Buffer {\n  return Buffer.from(num.toTwos(256).toArray())\n}\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport const addHexPrefix = function (str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nexport const toUtf8 = function (hex: string): string {\n  const zerosRegexp = /^(00)+|(00)+$/g\n  hex = stripHexPrefix(hex)\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided')\n  }\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex')\n\n  return bufferVal.toString('utf8')\n}\n\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexport const baToJSON = function (ba: any): any {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`\n  } else if (ba instanceof Array) {\n    const array = []\n    for (let i = 0; i < ba.length; i++) {\n      array.push(baToJSON(ba[i]))\n    }\n    return array\n  }\n}\n"]},"metadata":{},"sourceType":"script"}