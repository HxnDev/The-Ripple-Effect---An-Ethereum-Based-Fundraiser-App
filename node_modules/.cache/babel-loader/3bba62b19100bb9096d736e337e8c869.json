{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n\n      return arrayify(value);\n\n    case \"string\":\n      return toUtf8Bytes(value);\n\n    case \"bytes\":\n      return arrayify(value);\n\n    case \"bool\":\n      value = value ? \"0x01\" : \"0x00\";\n\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n\n      return arrayify(value);\n  }\n\n  let match = type.match(regexNumber);\n\n  if (match) {\n    //let signed = (match[1] === \"int\")\n    let size = parseInt(match[2] || \"256\");\n\n    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n      logger.throwArgumentError(\"invalid number type\", \"type\", type);\n    }\n\n    if (isArray) {\n      size = 256;\n    }\n\n    value = BigNumber.from(value).toTwos(size);\n    return zeroPad(value, size / 8);\n  }\n\n  match = type.match(regexBytes);\n\n  if (match) {\n    const size = parseInt(match[1]);\n\n    if (String(size) !== match[1] || size === 0 || size > 32) {\n      logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n    }\n\n    if (arrayify(value).byteLength !== size) {\n      logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n    }\n\n    if (isArray) {\n      return arrayify((value + Zeros).substring(0, 66));\n    }\n\n    return value;\n  }\n\n  match = type.match(regexArray);\n\n  if (match && Array.isArray(value)) {\n    const baseType = match[1];\n    const count = parseInt(match[2] || String(value.length));\n\n    if (count != value.length) {\n      logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n    }\n\n    const result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return concat(result);\n  }\n\n  return logger.throwArgumentError(\"invalid type\", \"type\", type);\n} // @TODO: Array Enum\n\n\nexport function pack(types, values) {\n  if (types.length != values.length) {\n    logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n  }\n\n  const tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n  return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n  return hashSha256(pack(types, values));\n}","map":{"version":3,"sources":["D:\\react\\test\\node_modules\\@ethersproject\\solidity\\src.ts\\index.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nfunction _pack(type: string, value: any, isArray?: boolean): Uint8Array {\n    switch(type) {\n        case \"address\":\n            if (isArray) { return zeroPad(value, 32); }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\": \"0x00\");\n            if (isArray) { return zeroPad(value, 32); }\n            return arrayify(value);\n    }\n\n    let match =  type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\")\n\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type)\n        }\n\n        if (isArray) { size = 256; }\n\n        value = BigNumber.from(value).toTwos(size);\n\n        return zeroPad(value, size / 8);\n    }\n\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type)\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${ type }`, \"value\", value)\n        }\n        if (isArray) { return arrayify((value + Zeros).substring(0, 66)); }\n        return value;\n    }\n\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${ type }`, \"value\", value)\n        }\n        const result: Array<Uint8Array> = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n\n    return logger.throwArgumentError(\"invalid type\", \"type\", type)\n}\n\n// @TODO: Array Enum\n\nexport function pack(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values)\n    }\n    const tight: Array<Uint8Array> = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n\nexport function keccak256(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    return hashKeccak256(pack(types, values));\n}\n\nexport function sha256(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    return hashSha256(pack(types, values));\n}\n"]},"metadata":{},"sourceType":"module"}