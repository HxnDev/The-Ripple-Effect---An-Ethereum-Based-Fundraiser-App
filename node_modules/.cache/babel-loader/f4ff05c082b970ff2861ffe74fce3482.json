{"ast":null,"code":"\"use strict\";\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network, options) {\n  if (network == null) {\n    network = \"homestead\";\n  } // If passed a URL, figure out the right type of provider based on the scheme\n\n\n  if (typeof network === \"string\") {\n    // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n    // Handle http and ws (and their secure variants)\n    const match = network.match(/^(ws|http)s?:/i);\n\n    if (match) {\n      switch (match[1]) {\n        case \"http\":\n          return new JsonRpcProvider(network);\n\n        case \"ws\":\n          return new WebSocketProvider(network);\n\n        default:\n          logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n      }\n    }\n  }\n\n  const n = getNetwork(network);\n\n  if (!n || !n._defaultProvider) {\n    logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n      operation: \"getDefaultProvider\",\n      network: network\n    });\n  }\n\n  return n._defaultProvider({\n    FallbackProvider,\n    AlchemyProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    JsonRpcProvider,\n    NodesmithProvider,\n    PocketProvider,\n    Web3Provider,\n    IpcProvider\n  }, options);\n} ////////////////////////\n// Exports\n\n\nexport { // Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider, ///////////////////////\n// Concrete Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, ///////////////////////\n// Signer\nJsonRpcSigner, ///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, ///////////////////////\n// Objects\nFormatter };","map":{"version":3,"sources":["D:\\react\\test\\node_modules\\@ethersproject\\providers\\src.ts\\index.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1]) {\n                case \"http\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n"]},"metadata":{},"sourceType":"module"}